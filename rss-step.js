import Parser from 'rss-parser';
import axios from 'axios';

export default defineComponent({
  async run({ steps, $ }) {
    // URL del feed RSS de Clar√≠n Pol√≠tica
    const RSS_FEED_URL = "https://www.clarin.com/rss/politica/";

    const parser = new Parser();
    let feed;
    let rawXmlContent = '';

    // --- 1. Descargar y parsear el feed RSS ---
    try {
      console.log("DEBUG: Descargando el feed RSS de:", RSS_FEED_URL);
      // A√±adimos un encabezado User-Agent para evitar ser bloqueados
      const response = await axios.get(RSS_FEED_URL, {
        timeout: 15000, // 15 segundos de timeout
        headers: {
          'User-Agent': 'Pipedream RSS Reader/1.0 (+https://pipedream.com)'
        }
      });
      rawXmlContent = response.data;
      console.log("‚úÖ Feed descargado con √©xito (primeros 200 caracteres):", rawXmlContent.substring(0, 200));

      // Usamos parseString para manejar el XML directamente
      feed = await parser.parseString(rawXmlContent);
      console.log("‚úÖ Feed RSS parseado con √©xito.");
    } catch (error) {
      console.error("‚ùå Error al descargar o parsear el feed RSS:", error.message);
      // Proporcionamos m√°s detalles del error si es de Axios
      if (axios.isAxiosError(error)) {
        console.error("Detalles del error Axios:", error.response?.status, error.response?.data);
      }
      $.flow.exit(`Fallo al leer el feed RSS: ${error.message}`);
      return;
    }

    // --- 2. Verificar que el feed tiene elementos ---
    if (!feed || !feed.items || feed.items.length === 0) {
      console.log("‚ùå El feed RSS no tiene elementos o est√° vac√≠o.");
      $.flow.exit("El feed RSS est√° vac√≠o o no es v√°lido.");
      return;
    }

    // Tomamos el primer art√≠culo, que suele ser el m√°s reciente.
    const latestArticle = feed.items[0];
    console.log("üì∞ Art√≠culo m√°s reciente encontrado:", latestArticle.title);

    // --- 3. MEJORADA: B√∫squeda exhaustiva de im√°genes ---
    let articleImageUrl = null;
    
    console.log("DEBUG: Buscando imagen en el art√≠culo...");
    console.log("DEBUG: Estructura del art√≠culo:", Object.keys(latestArticle));
    
    // M√©todo 1: Buscar en media:content (formato Media RSS)
    if (latestArticle['media:content']) {
      if (Array.isArray(latestArticle['media:content'])) {
        // Si es un array, buscar el primer elemento con URL
        for (const media of latestArticle['media:content']) {
          if (media['$'] && media['$'].url) {
            articleImageUrl = media['$'].url;
            console.log("‚úÖ Imagen encontrada en media:content (array):", articleImageUrl);
            break;
          }
        }
      } else if (latestArticle['media:content']['$'] && latestArticle['media:content']['$'].url) {
        // Si es un objeto directo
        articleImageUrl = latestArticle['media:content']['$'].url;
        console.log("‚úÖ Imagen encontrada en media:content (objeto):", articleImageUrl);
      }
    }
    
    // M√©todo 2: Buscar en media:thumbnail
    if (!articleImageUrl && latestArticle['media:thumbnail']) {
      if (Array.isArray(latestArticle['media:thumbnail'])) {
        for (const thumb of latestArticle['media:thumbnail']) {
          if (thumb['$'] && thumb['$'].url) {
            articleImageUrl = thumb['$'].url;
            console.log("‚úÖ Imagen encontrada en media:thumbnail (array):", articleImageUrl);
            break;
          }
        }
      } else if (latestArticle['media:thumbnail']['$'] && latestArticle['media:thumbnail']['$'].url) {
        articleImageUrl = latestArticle['media:thumbnail']['$'].url;
        console.log("‚úÖ Imagen encontrada en media:thumbnail (objeto):", articleImageUrl);
      }
    }
    
    // M√©todo 3: Buscar en enclosure (formato RSS est√°ndar)
    if (!articleImageUrl && latestArticle.enclosure) {
      if (Array.isArray(latestArticle.enclosure)) {
        // Si es un array, buscar el primer elemento de imagen
        for (const enc of latestArticle.enclosure) {
          if (enc.url && enc.type && enc.type.startsWith('image')) {
            articleImageUrl = enc.url;
            console.log("‚úÖ Imagen encontrada en enclosure (array):", articleImageUrl);
            break;
          }
        }
      } else if (latestArticle.enclosure.url && latestArticle.enclosure.type && latestArticle.enclosure.type.startsWith('image')) {
        // Si es un objeto directo
        articleImageUrl = latestArticle.enclosure.url;
        console.log("‚úÖ Imagen encontrada en enclosure (objeto):", articleImageUrl);
      }
    }
    
    // M√©todo 4: Buscar en el contenido HTML usando regex
    if (!articleImageUrl) {
      const contentToSearchForImage = latestArticle.content || latestArticle.contentSnippet || latestArticle.description || '';
      console.log("DEBUG: Buscando imagen en contenido HTML (primeros 200 chars):", contentToSearchForImage.substring(0, 200));
      
      // Buscar etiquetas img
      const imgRegex = /<img[^>]+src=["']([^"']+)["'][^>]*>/i;
      const match = contentToSearchForImage.match(imgRegex);
      if (match && match[1]) {
        articleImageUrl = match[1];
        console.log("‚úÖ Imagen encontrada mediante regex en contenido:", articleImageUrl);
      }
      
      // Si no se encontr√≥ con src, buscar con data-src (lazy loading)
      if (!articleImageUrl) {
        const dataSrcRegex = /<img[^>]+data-src=["']([^"']+)["'][^>]*>/i;
        const dataSrcMatch = contentToSearchForImage.match(dataSrcRegex);
        if (dataSrcMatch && dataSrcMatch[1]) {
          articleImageUrl = dataSrcMatch[1];
          console.log("‚úÖ Imagen encontrada mediante regex en data-src:", articleImageUrl);
        }
      }
    }
    
    // M√©todo 5: Buscar en campos espec√≠ficos de diferentes fuentes
    if (!articleImageUrl) {
      // Para Clar√≠n espec√≠ficamente
      if (latestArticle['clarin:image']) {
        articleImageUrl = latestArticle['clarin:image'];
        console.log("‚úÖ Imagen encontrada en clarin:image:", articleImageUrl);
      }
      // Para otros formatos
      else if (latestArticle.image) {
        articleImageUrl = latestArticle.image;
        console.log("‚úÖ Imagen encontrada en campo image:", articleImageUrl);
      }
      else if (latestArticle.thumbnail) {
        articleImageUrl = latestArticle.thumbnail;
        console.log("‚úÖ Imagen encontrada en campo thumbnail:", articleImageUrl);
      }
    }
    
    // M√©todo 6: Intentar obtener imagen desde la URL del art√≠culo
    if (!articleImageUrl && latestArticle.link) {
      try {
        console.log("DEBUG: Intentando obtener imagen desde la URL del art√≠culo:", latestArticle.link);
        const articleResponse = await axios.get(latestArticle.link, {
          timeout: 10000,
          headers: {
            'User-Agent': 'Pipedream RSS Reader/1.0 (+https://pipedream.com)'
          }
        });
        
        const articleHtml = articleResponse.data;
        // Buscar og:image meta tag
        const ogImageRegex = /<meta[^>]+property=["']og:image["'][^>]+content=["']([^"']+)["'][^>]*>/i;
        const ogMatch = articleHtml.match(ogImageRegex);
        if (ogMatch && ogMatch[1]) {
          articleImageUrl = ogMatch[1];
          console.log("‚úÖ Imagen encontrada en og:image meta tag:", articleImageUrl);
        }
        
        // Si no se encontr√≥ og:image, buscar la primera imagen del art√≠culo
        if (!articleImageUrl) {
          const firstImgRegex = /<img[^>]+src=["']([^"']+)["'][^>]*>/i;
          const firstImgMatch = articleHtml.match(firstImgRegex);
          if (firstImgMatch && firstImgMatch[1]) {
            articleImageUrl = firstImgMatch[1];
            console.log("‚úÖ Primera imagen encontrada en el art√≠culo:", articleImageUrl);
          }
        }
      } catch (error) {
        console.log("‚ö†Ô∏è No se pudo obtener imagen desde la URL del art√≠culo:", error.message);
      }
    }

    // Si no se encontr√≥ ninguna imagen, usar fallback
    if (!articleImageUrl) {
      articleImageUrl = 'https://placehold.co/800x450/cccccc/333333?text=Imagen+No+Disponible';
      console.log("‚ö†Ô∏è No se encontr√≥ imagen. Usando imagen por defecto.");
    } else {
      console.log("‚úÖ URL de imagen final:", articleImageUrl);
    }

    // --- 4. Extraer el contenido principal del art√≠culo ---
    // Priorizamos content, luego contentSnippet, y finalmente description.
    let extractedArticleContent = latestArticle.content || latestArticle.contentSnippet || latestArticle.description || '';

    console.log("DEBUG: Longitud de 'content':", latestArticle.content?.length);
    console.log("DEBUG: Longitud de 'contentSnippet':", latestArticle.contentSnippet?.length);
    console.log("DEBUG: Longitud de 'description':", latestArticle.description?.length);
    console.log("DEBUG: Contenido extra√≠do para el prompt (primeros 500 caracteres):", extractedArticleContent.substring(0, 500));

    // --- 5. Manejar contenido vac√≠o (Fallback) ---
    if (extractedArticleContent.trim() === '') {
      console.warn("‚ö†Ô∏è El contenido del art√≠culo est√° vac√≠o. Usando un texto gen√©rico de relleno.");
      extractedArticleContent = `
        Parece que el contenido principal del art√≠culo no se pudo extraer del feed RSS.
        Este es un texto de relleno temporal para que el proceso de generaci√≥n de IA pueda continuar.
        La pol√≠tica argentina contin√∫a siendo un tema de gran relevancia nacional, con m√∫ltiples actores y perspectivas que influyen en el desarrollo del pa√≠s.
        En este art√≠culo analizamos las √∫ltimas noticias pol√≠ticas, sus implicaciones y el impacto en la sociedad argentina.
        Tambi√©n exploramos las diferentes posturas y debates que surgen en torno a estos temas.
        La informaci√≥n pol√≠tica es fundamental para mantener una ciudadan√≠a informada y participativa.
      `;
    }

    // --- 6. Exportar datos relevantes para pasos posteriores ---
    $.export("article_link", latestArticle.link || "https://www.clarin.com/");
    $.export("article_title", latestArticle.title || "T√≠tulo no disponible");
    $.export("article_content", extractedArticleContent);
    // Exportamos la URL de la imagen, con un fallback gen√©rico si no se encontr√≥ ninguna
    $.export("article_image_url", articleImageUrl);
    console.log("DEBUG: article_image_url exportado:", articleImageUrl);

    // --- 7. Generar el prompt para Gemini ---
    // Hemos mejorado el prompt para que pida expl√≠citamente el campo 'articulo_completo'
    // que es el que se usa en code1.
    const prompt_for_gemini = `
Act√∫a como un redactor SEO profesional y experto en marketing de contenidos. Tu tarea es procesar el siguiente art√≠culo y transformarlo en un formato JSON listo para ser publicado, optimizado para posicionamiento web y f√°cil integraci√≥n.

El JSON DEBE contener las siguientes claves y seguir este formato EXACTAMENTE:

{
  "titulo": "string",          // Titulo principal del art√≠culo. Debe ser atractivo, incluir palabras clave relevantes y no exceder los 70 caracteres.
  "resumen": "string",         // Descripci√≥n corta o subt√≠tulo (meta-description). Debe ser una sinopsis concisa de 2 a 3 frases, optimizada para SEO (aprox. 150-160 caracteres).
  "slug": "string",            // Versi√≥n amigable para URL del t√≠tulo. Min√∫sculas, sin espacios (guiones en su lugar), sin caracteres especiales, longitud m√°xima 50 caracteres.
  "keywords": ["string", "string"], // Array de strings. Contiene entre 5 y 10 palabras clave y frases relevantes para el art√≠culo, separadas por comas.
  "fuente": "string",          // URL o nombre de la fuente original del art√≠culo.
  "articulo_completo": "string" // Contenido extenso del art√≠culo. DEBE estar en formato HTML bien estructurado con etiquetas <p>, <h2>, <h3>, <ul>, <ol>, <blockquote>, etc. No incluyas <head>, <body>, <html> ni otros elementos de p√°gina completa. Solo el contenido del body. ASEG√öRATE DE QUE ESTE CAMPO SIEMPRE EXISTA Y CONTENGA EL TEXTO DEL ART√çCULO.
}

Criterios adicionales para la generaci√≥n:
- El 'titulo' debe ser llamativo y relevante al contenido original.
- El 'resumen' debe ser persuasivo y contener las principales palabras clave del art√≠culo.
- Las 'keywords' deben ser una mezcla de palabras clave de cola corta y cola larga.
- El 'articulo_completo' debe ser una reescritura o expansi√≥n del contenido original si es posible, aportando valor adicional y con formato HTML sem√°ntico. Si el contenido original es muy corto, expande la informaci√≥n de manera coherente.
- Aseg√∫rate de que el JSON resultante sea V√ÅLIDO y pueda ser parseado directamente.

Aqu√≠ est√° el contenido del art√≠culo a procesar:
---
T√≠tulo del Art√≠culo Original: ${latestArticle.title || "T√≠tulo no disponible"}
Contenido Original:
${extractedArticleContent}
Fuente Original: ${latestArticle.link || "https://www.clarin.com/"}
---

Por favor, genera S√ìLO el objeto JSON. No a√±adas texto introductorio ni explicaciones fuera del JSON.
`;

    // Exportamos el prompt para ser utilizado por el siguiente paso (Gemini)
    $.export("prompt_for_gemini", prompt_for_gemini);
    console.log("DEBUG: prompt_for_gemini exportado (primeros 500 caracteres):", prompt_for_gemini.substring(0, 500));
  },
}); 